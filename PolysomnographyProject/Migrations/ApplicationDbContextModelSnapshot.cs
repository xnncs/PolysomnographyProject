// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PolysomnographyProject.Database.DataContexts;

#nullable disable

namespace PolysomnographyProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PolysomnographyProject.Models.Business.Sleep.SleepResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SleepResult");
                });

            modelBuilder.Entity("PolysomnographyProject.Models.Business.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("UniqueLogin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PolysomnographyProject.Models.Business.Sleep.SleepResult", b =>
                {
                    b.HasOne("PolysomnographyProject.Models.Business.User", "User")
                        .WithMany("SleepResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PolysomnographyProject.Models.Helping.SleepResultData", "Data", b1 =>
                        {
                            b1.Property<Guid>("SleepResultId")
                                .HasColumnType("uuid");

                            b1.Property<double>("HF")
                                .HasColumnType("double precision");

                            b1.Property<double>("LF")
                                .HasColumnType("double precision");

                            b1.Property<double>("SDNN")
                                .HasColumnType("double precision");

                            b1.HasKey("SleepResultId");

                            b1.ToTable("SleepResult");

                            b1.WithOwner()
                                .HasForeignKey("SleepResultId");
                        });

                    b.Navigation("Data")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PolysomnographyProject.Models.Business.User", b =>
                {
                    b.OwnsOne("PolysomnographyProject.Models.Business.Sleep.PersonalSleepData", "PersonalSleepData", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("PolysomnographyProject.Models.Helping.SleepTimePreferences", "SleepTimePreferences", b2 =>
                                {
                                    b2.Property<Guid>("PersonalSleepDataUserId")
                                        .HasColumnType("uuid");

                                    b2.Property<DateTime>("EndTime")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime>("StartTime")
                                        .HasColumnType("timestamp with time zone");

                                    b2.HasKey("PersonalSleepDataUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonalSleepDataUserId");
                                });

                            b1.Navigation("SleepTimePreferences")
                                .IsRequired();
                        });

                    b.OwnsOne("PolysomnographyProject.Models.Business.TelegramUserData", "TelegramUserData", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<long>("TelegramId")
                                .HasColumnType("bigint");

                            b1.Property<string>("TelegramUsername")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("PersonalSleepData")
                        .IsRequired();

                    b.Navigation("TelegramUserData")
                        .IsRequired();
                });

            modelBuilder.Entity("PolysomnographyProject.Models.Business.User", b =>
                {
                    b.Navigation("SleepResults");
                });
#pragma warning restore 612, 618
        }
    }
}
